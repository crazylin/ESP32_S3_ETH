name: Build ESP32-S3 + W5500 nanoFramework Firmware (Optimized)

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug
      target_board:
        description: 'Target board'
        required: true
        default: 'ESP32_S3_ETH'
        type: choice
        options:
        - ESP32_S3_ETH
        - ESP32_S3_ALL
      upload_artifacts:
        description: 'Upload artifacts'
        required: false
        default: true
        type: boolean

env:
  ESP_IDF_VERSION: v5.2.3
  NANOFRAMEWORK_VERSION: latest
  TARGET_BOARD: ${{ github.event.inputs.target_board || 'ESP32_S3_ETH' }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: ["${{ github.event.inputs.build_type || 'Release' }}"]
        include:
          - build_type: Release
            cmake_build_type: MinSizeRel
            rtm: ON
            debugger: OFF
            optimization: "-Os"
          - build_type: Debug
            cmake_build_type: Debug
            rtm: OFF
            debugger: ON
            optimization: "-Og"
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        path: nanobuild-scripts

    - name: Checkout nanoFramework
      uses: actions/checkout@v4
      with:
        repository: nanoframework/nf-interpreter
        path: nf-interpreter
        submodules: recursive
        fetch-depth: 0

    - name: Free Disk Space
      run: |
        echo "Freeing up disk space..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Setup Cache Keys
      id: cache-keys
      run: |
        echo "esp_idf_key=${{ runner.os }}-esp-idf-${{ env.ESP_IDF_VERSION }}-${{ hashFiles('**/requirements.txt') }}" >> $GITHUB_OUTPUT
        echo "ccache_key=${{ runner.os }}-ccache-${{ matrix.build_type }}-${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "build_key=${{ runner.os }}-build-${{ matrix.build_type }}-${{ hashFiles('nf-interpreter/CMakeLists.txt', 'nf-interpreter/targets/ESP32/**') }}" >> $GITHUB_OUTPUT

    - name: Cache ESP-IDF
      uses: actions/cache@v4
      id: cache-esp-idf
      with:
        path: |
          ~/esp/esp-idf
          ~/.espressif
          ~/.cache/esp32
          ~/.espressif/python_env
          ~/.espressif/tools
          ~/.espressif/dist
        key: ${{ steps.cache-keys.outputs.esp_idf_key }}
        restore-keys: |
          ${{ runner.os }}-esp-idf-

    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ steps.cache-keys.outputs.ccache_key }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ matrix.build_type }}-

    - name: Cache Build
      uses: actions/cache@v4
      with:
        path: |
          nf-interpreter/build
          nf-interpreter/targets/ESP32/_common
          nf-interpreter/targets/ESP32/_nanoCLR
        key: ${{ steps.cache-keys.outputs.build_key }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.build_type }}-

    - name: Setup ccache
      run: |
        sudo apt-get update
        sudo apt-get install -y ccache
        echo "CCACHE_DIR=~/.ccache" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
        echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=500M" >> $GITHUB_ENV
        ccache --zero-stats

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git wget curl flex bison gperf python3 python3-pip \
          python3-setuptools python3-venv cmake ninja-build ccache \
          libffi-dev libssl-dev dfu-util libusb-1.0-0 \
          build-essential gcc g++ gcc-multilib g++-multilib \
          pkg-config autoconf automake libtool unzip

    - name: Install ESP-IDF (if not cached)
      if: steps.cache-esp-idf.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/esp
        cd ~/esp
        
        # Clone ESP-IDF with specific version
        git clone -b ${{ env.ESP_IDF_VERSION }} --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        
        # Install ESP-IDF tools
        ./install.sh esp32s3
        
        # Install all Python requirements from ESP-IDF requirements
        python3 -m pip install -r tools/requirements/requirements.core.txt
        python3 -m pip install click pyserial pyparsing
        
        # Export environment
        source export.sh
        
        # Verify installation
        echo "ESP-IDF Version: $(idf.py --version)"
        echo "ESP32-S3 Toolchain: $(xtensa-esp32s3-elf-gcc --version | head -1)"
        
    - name: Setup ESP-IDF (if cached)
      if: steps.cache-esp-idf.outputs.cache-hit == 'true'
      run: |
        echo "ESP-IDF found in cache, setting up environment..."
        source ~/esp/esp-idf/export.sh
        echo "ESP-IDF Version: $(idf.py --version)"
        echo "ESP32-S3 Toolchain: $(xtensa-esp32s3-elf-gcc --version | head -1)"

    - name: Verify ESP-IDF Installation
      run: |
        source ~/esp/esp-idf/export.sh
        echo "IDF_PATH=$HOME/esp/esp-idf" >> $GITHUB_ENV
        echo "PATH=$HOME/esp/esp-idf/tools:$PATH" >> $GITHUB_ENV
        
        # Verify ESP-IDF installation by checking basic commands
        idf.py --version
        xtensa-esp32s3-elf-gcc --version
        
        # Test if idf.py can be used (this will validate Python dependencies)
        cd /tmp && idf.py --help > /dev/null && echo "ESP-IDF dependencies verified"

    - name: Configure Build Environment
      run: |
        # Set environment variables
        echo "IDF_PATH=$HOME/esp/esp-idf" >> $GITHUB_ENV
        echo "PATH=$HOME/esp/esp-idf/tools:$PATH" >> $GITHUB_ENV
        
        # Create build directory
        mkdir -p nf-interpreter/build
        
        # Copy target configuration
        cp nanobuild-scripts/CMakePresets-W5500.json nf-interpreter/CMakePresets.json

    - name: Build nanoFramework firmware
      working-directory: nf-interpreter
      run: |
        chmod +x ../build-esp32-s3-w5500.sh
        ../build-esp32-s3-w5500.sh ${{ matrix.build_type }}

    - name: Package Firmware
      working-directory: nf-interpreter
      run: |
        cd build
        
        # Generate binary files
        esptool.py --chip esp32s3 elf2image --flash_mode dio --flash_freq 80m --flash_size 8MB nanoCLR.elf -o nanoCLR.bin
        
        # Create partition table
        cat > partitions.csv << EOF
        # Name,   Type, SubType, Offset,  Size, Flags
        nvs,      data, nvs,     0x9000,  0x6000,
        phy_init, data, phy,     0xf000,  0x1000,
        factory,  app,  factory, 0x10000, 0x7F0000,
        EOF
        
        # Generate partition binary
        python $HOME/esp/esp-idf/components/partition_table/gen_esp32part.py partitions.csv partitions.bin

    - name: Upload Artifacts
      if: github.event.inputs.upload_artifacts != 'false'
      uses: actions/upload-artifact@v4
      with:
        name: ESP32-S3-W5500-${{ matrix.build_type }}-${{ github.sha }}
        path: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          nf-interpreter/build/bootloader/bootloader.bin
          nf-interpreter/build/partitions.bin
        retention-days: 30

    - name: Create Release
      if: github.ref == 'refs/heads/main' && matrix.build_type == 'Release' && github.event_name == 'push'
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: "ESP32-S3 W5500 nanoFramework Firmware"
        files: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          nf-interpreter/build/partitions.bin
          nf-interpreter/build/bootloader/bootloader.bin

    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Board**: ${{ env.TARGET_BOARD }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ matrix.build_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ESP-IDF Version**: ${{ env.ESP_IDF_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **nanoFramework Version**: ${{ env.NANOFRAMEWORK_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ESP-IDF Cache Hit**: ${{ steps.cache-esp-idf.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
        
        # Check file sizes
        if [ -f "nf-interpreter/build/nanoCLR.bin" ]; then
          echo "- **nanoCLR.bin Size**: $(stat -c%s nf-interpreter/build/nanoCLR.bin) bytes" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "nf-interpreter/build/nanoBooter.bin" ]; then
          echo "- **nanoBooter.bin Size**: $(stat -c%s nf-interpreter/build/nanoBooter.bin) bytes" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show ccache final stats
        echo "## ccache Statistics" >> $GITHUB_STEP_SUMMARY
        ccache --show-stats | head -10 >> $GITHUB_STEP_SUMMARY