name: Build ESP32-S3 + W5500 nanoFramework Firmware

on:
  push:
    branches: [ main]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug
      upload_artifacts:
        description: 'Upload artifacts'
        required: false
        default: true
        type: boolean

env:
  ESP_IDF_VERSION: v5.2.3
  NANOFRAMEWORK_VERSION: latest

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: ["${{ github.event.inputs.build_type || 'Release' }}"]
        include:
          - build_type: Release
            cmake_build_type: MinSizeRel
            rtm: ON
            debugger: OFF
          - build_type: Debug
            cmake_build_type: Debug
            rtm: OFF
            debugger: ON
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        path: nanobuild-scripts

    - name: Checkout nanoFramework
      uses: actions/checkout@v4
      with:
        repository: nanoframework/nf-interpreter
        path: nf-interpreter
        submodules: recursive
        fetch-depth: 0

    - name: Setup Ubuntu Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git wget flex bison gperf python3 python3-pip \
          python3-setuptools python3.12-venv cmake ninja-build ccache \
          libffi-dev libssl-dev dfu-util libusb-1.0-0 \
          build-essential gcc g++ gcc-multilib g++-multilib \
          pkg-config autoconf automake libtool

    - name: Cache ESP-IDF
      uses: actions/cache@v3
      id: cache-esp-idf
      with:
        path: ~/esp/esp-idf
        key: ${{ runner.os }}-esp-idf-${{ env.ESP_IDF_VERSION }}
        restore-keys: |
          ${{ runner.os }}-esp-idf-

    - name: Install ESP-IDF
      if: steps.cache-esp-idf.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/esp
        cd ~/esp
        git clone -b ${{ env.ESP_IDF_VERSION }} --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        ./install.sh esp32s3
        
        # 验证安装
        echo "=== ESP-IDF Installation Verification ==="
        ls -la ~/.espressif/tools/ | head -10
        echo "ESP-IDF version: $(git describe --tags --abbrev=0)"
        echo "========================================"

    - name: Setup ESP-IDF Environment
      run: |
        echo "ESP_IDF_PATH=$HOME/esp/esp-idf" >> $GITHUB_ENV
        echo "PATH=$HOME/esp/esp-idf/tools:$PATH" >> $GITHUB_ENV
        
        # 设置 ESP-IDF 工具链环境变量
        echo "IDF_TOOLS_PATH=$HOME/.espressif" >> $GITHUB_ENV
        echo "IDF_PYTHON_ENV_PATH=$HOME/.espressif/python_env/idf5.2_py3.12_env" >> $GITHUB_ENV
        
        # 确保工具链在 PATH 中
        echo "PATH=$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/riscv32-esp-elf/esp-12.2.0_20230208/riscv32-esp-elf/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/esp32ulp-elf/2.35_20220830/esp32ulp-elf/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/cmake/3.24.0/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/openocd-esp32/v0.12.0-esp32-20230419/openocd-esp32/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/ninja/1.10.2:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/idf-exe/1.0.3:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/ccache/4.8/ccache-4.8-linux-x86_64:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/dfu-util/0.11/dfu-util-0.11/dfu-util:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/esp-rom-elfs/20230320:$PATH" >> $GITHUB_ENV
        
        # 设置编译器环境变量
        echo "CC=$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc" >> $GITHUB_ENV
        echo "CXX=$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-g++" >> $GITHUB_ENV
        echo "CMAKE_MAKE_PROGRAM=$HOME/.espressif/tools/ninja/1.10.2/ninja" >> $GITHUB_ENV

    - name: Verify Build Tools
      run: |
        echo "=== Build Tools Verification ==="
        echo "CMake version: $(cmake --version)"
        echo "Ninja version: $(ninja --version)"
        echo "GCC version: $(gcc --version | head -1)"
        echo "G++ version: $(g++ --version | head -1)"
        echo "Python version: $(python3 --version)"
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "PATH: $PATH"
        echo "================================"
        
        # 验证 ESP-IDF 工具链
        echo "=== ESP-IDF Toolchain Verification ==="
        if [ -d "$HOME/.espressif" ]; then
          echo "ESP-IDF tools directory exists"
          ls -la $HOME/.espressif/tools/ | head -10
        else
          echo "ESP-IDF tools directory not found"
        fi
        
        # 检查关键工具
        if [ -f "$HOME/.espressif/tools/ninja/1.10.2/ninja" ]; then
          echo "Ninja found: $HOME/.espressif/tools/ninja/1.10.2/ninja"
          $HOME/.espressif/tools/ninja/1.10.2/ninja --version
        else
          echo "Ninja not found in expected location"
        fi
        
        if [ -f "$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc" ]; then
          echo "ESP32-S3 compiler found"
          $HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc --version | head -1
        else
          echo "ESP32-S3 compiler not found in expected location"
        fi
        echo "====================================="

    - name: Copy Custom CMake Presets
      run: |
        cp nanobuild-scripts/CMakePresets-W5500.json nf-interpreter/CMakePresets.json

    - name: Verify ESP-IDF Environment
      run: |
        # 加载 ESP-IDF 环境
        source ~/esp/esp-idf/export.sh
        
        echo "=== ESP-IDF Environment Verification ==="
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "IDF_TOOLS_PATH: $IDF_TOOLS_PATH"
        echo "PATH includes ESP-IDF tools: $(echo $PATH | grep -o '[^:]*esp-idf[^:]*' | head -5)"
        echo "Ninja version: $(ninja --version)"
        echo "ESP32-S3 compiler: $(which xtensa-esp32s3-elf-gcc)"
        echo "========================================="
        
        # 验证关键环境变量
        echo "=== Key Environment Variables ==="
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE_MAKE_PROGRAM: $CMAKE_MAKE_PROGRAM"
        echo "================================="
        
        # 验证工具文件存在
        echo "=== Tool File Verification ==="
        if [ -f "$CC" ]; then
          echo "✓ CC exists: $CC"
        else
          echo "✗ CC not found: $CC"
        fi
        
        if [ -f "$CXX" ]; then
          echo "✓ CXX exists: $CXX"
        else
          echo "✗ CXX not found: $CXX"
        fi
        
        if [ -f "$CMAKE_MAKE_PROGRAM" ]; then
          echo "✓ CMAKE_MAKE_PROGRAM exists: $CMAKE_MAKE_PROGRAM"
        else
          echo "✗ CMAKE_MAKE_PROGRAM not found: $CMAKE_MAKE_PROGRAM"
        fi
        echo "================================"

    - name: Configure CMake with Preset
      run: |
        set -e
        cd nf-interpreter
        mkdir -p build
        
        # 设置 ESP-IDF 环境（必须在同一 shell 中）
        source ~/esp/esp-idf/export.sh
        
        # 手动设置关键环境变量以确保它们被正确设置
        export ESP_IDF_PATH="$HOME/esp/esp-idf"
        export IDF_TOOLS_PATH="$HOME/.espressif"
        export PATH="$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin:$PATH"
        export PATH="$HOME/.espressif/tools/ninja/1.10.2:$PATH"
        export CC="$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc"
        export CXX="$HOME/.espressif/tools/xtensa-esp32s3-elf/esp-12.2.0_20230208/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-g++"
        export CMAKE_MAKE_PROGRAM="$HOME/.espressif/tools/ninja/1.10.2/ninja"
        
        # 显示环境变量
        echo "=== Environment Variables ==="
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "PATH: $PATH"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE_MAKE_PROGRAM: $CMAKE_MAKE_PROGRAM"
        echo "============================"
        
        # 验证工具路径
        echo "=== Tool Path Verification ==="
        echo "CC path: $CC"
        echo "CXX path: $CXX"
        echo "Ninja path: $CMAKE_MAKE_PROGRAM"
        
        # 检查文件是否存在
        if [ -f "$CC" ]; then
          echo "✓ CC file exists"
          ls -la "$CC"
        else
          echo "✗ CC file not found: $CC"
          exit 1
        fi
        
        if [ -f "$CXX" ]; then
          echo "✓ CXX file exists"
          ls -la "$CXX"
        else
          echo "✗ CXX file not found: $CXX"
          exit 1
        fi
        
        if [ -f "$CMAKE_MAKE_PROGRAM" ]; then
          echo "✓ Ninja file exists"
          ls -la "$CMAKE_MAKE_PROGRAM"
          "$CMAKE_MAKE_PROGRAM" --version
        else
          echo "✗ Ninja file not found: $CMAKE_MAKE_PROGRAM"
          exit 1
        fi
        echo "============================="
        
        # 验证关键工具
        echo "=== Tool Verification ==="
        which ninja || { echo "ninja not found in PATH"; exit 1; }
        ninja --version
        which xtensa-esp32s3-elf-gcc || { echo "ESP32-S3 compiler not found"; exit 1; }
        xtensa-esp32s3-elf-gcc --version | head -1
        echo "========================="
        
        # 验证 ESP-IDF 工具
        echo "=== ESP-IDF Tool Verification ==="
        if command -v idf.py >/dev/null 2>&1; then
          echo "✓ idf.py found"
          idf.py --version
        else
          echo "✗ idf.py not found"
        fi
        
        if [ -n "$ESP_IDF_PATH" ]; then
          echo "✓ ESP_IDF_PATH is set: $ESP_IDF_PATH"
        else
          echo "✗ ESP_IDF_PATH is not set"
        fi
        
        if [ -n "$IDF_TOOLS_PATH" ]; then
          echo "✓ IDF_TOOLS_PATH is set: $IDF_TOOLS_PATH"
        else
          echo "✗ IDF_TOOLS_PATH is not set"
        fi
        echo "================================"
        
        # 显示可用的 CMake 预设
        echo "=== Available CMake Presets ==="
        cmake --list-presets || true
        echo "================================"
        
        # 使用自定义预设，根据构建类型选择，并传递编译器变量
        if [ "${{ matrix.build_type }}" = "Release" ]; then
          echo "Configuring with ESP32_S3_W5500_Release preset..."
          cmake --preset ESP32_S3_W5500_Release \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_MAKE_PROGRAM="$CMAKE_MAKE_PROGRAM"
        else
          echo "Configuring with ESP32_S3_W5500_Debug preset..."
          cmake --preset ESP32_S3_W5500_Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_MAKE_PROGRAM="$CMAKE_MAKE_PROGRAM"
        fi
        
        # 显示 CMake 缓存
        echo "=== CMake Cache Contents ==="
        cat build/CMakeCache.txt | grep -E "(CMAKE_C_COMPILER|CMAKE_CXX_COMPILER|CMAKE_MAKE_PROGRAM|ESP_IDF_PATH)" || true
        echo "============================"
        
        # 如果配置失败，显示更多诊断信息
        if [ $? -ne 0 ]; then
          echo "=== CMake Configuration Failed ==="
          echo "Available presets:"
          cmake --list-presets || true
          echo "Available generators:"
          cmake --help | grep -A 20 "Generators" || true
          echo "================================"
          exit 1
        fi

    - name: Build Firmware
      run: |
        cd nf-interpreter/build
        cmake --build . -- -j$(nproc)

    - name: Calculate Firmware Size
      id: firmware_size
      run: |
        cd nf-interpreter/build
        SIZE=$(stat -c%s nanoCLR.bin)
        SIZE_MB=$(echo "scale=2; $SIZE/1024/1024" | bc)
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
        echo "Firmware size: ${SIZE_MB}MB ($SIZE bytes)"

    - name: Create Release Notes
      run: |
        cat > release-notes.md << 'EOF'
        # ESP32-S3 + W5500 nanoFramework Firmware
        
        ## Build Information
        - **Build Type**: ${{ matrix.build_type }}
        - **ESP-IDF Version**: ${{ env.ESP_IDF_VERSION }}
        - **nanoFramework Version**: ${{ env.NANOFRAMEWORK_VERSION }}
        - **Firmware Size**: ${{ steps.firmware_size.outputs.size_mb }}MB
        - **Build Date**: $(date -u)
        - **Commit**: ${{ github.sha }}
        
        ## Hardware Configuration
        - **Target**: ESP32-S3
        - **Ethernet**: W5500 SPI Module
        - **SPI Pins**:
          - SCLK: GPIO13
          - MISO: GPIO12
          - MOSI: GPIO11
          - CS: GPIO14
          - INT: GPIO10
          - RST: GPIO9
        
        ## Features
        - ${{ matrix.build_type == 'Release' && '✅ Production optimized (RTM enabled)' || '✅ Full debugging support' }}
        - ${{ matrix.build_type == 'Release' && '✅ Debugger disabled' || '✅ Debug symbols included' }}
        - ${{ matrix.build_type == 'Release' && '✅ Size optimized' || '✅ Visual Studio debugging' }}
        
        ## Usage
        1. Flash the firmware using nanoFramework Flash Tool
        2. Connect W5500 module according to pin configuration
        3. Use nanoFramework Visual Studio extension for development
        
        ## Downloads
        - Firmware: `nanoCLR.bin`
        - Release notes: `release-notes.md`
        EOF

    - name: Upload Firmware Artifact
      if: github.event.inputs.upload_artifacts != 'false'
      uses: actions/upload-artifact@v4
      with:
        name: nanoFramework-ESP32S3-W5500-${{ matrix.build_type }}-${{ github.sha }}
        path: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          release-notes.md
        retention-days: 30

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') && matrix.build_type == 'Release'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body_path: release-notes.md
        files: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          release-notes.md
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: nf-interpreter/build/nanoCLR.bin
        asset_name: nanoCLR-ESP32S3-W5500-${{ matrix.build_type }}-${{ github.ref_name }}.bin
        asset_content_type: application/octet-stream