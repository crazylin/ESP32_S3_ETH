name: Build ESP32-S3 + W5500 nanoFramework Firmware

on:
  push:
    branches: [ main]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug
      upload_artifacts:
        description: 'Upload artifacts'
        required: false
        default: true
        type: boolean

env:
  ESP_IDF_VERSION: v5.2.3
  NANOFRAMEWORK_VERSION: latest

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: ["${{ github.event.inputs.build_type || 'Release' }}"]
        include:
          - build_type: Release
            cmake_build_type: MinSizeRel
            rtm: ON
            debugger: OFF
          - build_type: Debug
            cmake_build_type: Debug
            rtm: OFF
            debugger: ON
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        path: nanobuild-scripts

    - name: Checkout nanoFramework
      uses: actions/checkout@v4
      with:
        repository: nanoframework/nf-interpreter
        path: nf-interpreter
        submodules: recursive
        fetch-depth: 0

    - name: Setup Ubuntu Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git wget flex bison gperf python3 python3-pip \
          python3-setuptools python3.12-venv cmake ninja-build ccache \
          libffi-dev libssl-dev dfu-util libusb-1.0-0 \
          build-essential gcc g++ gcc-multilib g++-multilib \
          pkg-config autoconf automake libtool

    - name: Cache ESP-IDF
      uses: actions/cache@v3
      id: cache-esp-idf
      with:
        path: ~/esp/esp-idf
        key: ${{ runner.os }}-esp-idf-${{ env.ESP_IDF_VERSION }}
        restore-keys: |
          ${{ runner.os }}-esp-idf-

    - name: Install ESP-IDF
      if: steps.cache-esp-idf.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/esp
        cd ~/esp
        git clone -b ${{ env.ESP_IDF_VERSION }} --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        
        # 显示 ESP-IDF 版本和安装脚本信息
        echo "=== ESP-IDF Version Info ==="
        echo "Branch: ${{ env.ESP_IDF_VERSION }}"
        echo "Commit: $(git rev-parse HEAD)"
        echo "Install script exists: $(test -f ./install.sh && echo 'Yes' || echo 'No')"
        echo "Install script permissions: $(ls -la ./install.sh)"
        echo "============================="
        
        # 检查安装脚本的帮助信息
        echo "=== Install Script Help ==="
        ./install.sh --help | head -30
        echo "==========================="
        
        # 安装 ESP32-S3 工具链
        echo "=== Installing ESP32-S3 Toolchain ==="
        
        # 方法 1: 尝试安装 ESP32-S3 工具链
        echo "Method 1: Installing with esp32s3 target..."
        if ./install.sh esp32s3; then
          echo "✓ ESP32-S3 toolchain installation completed"
        else
          echo "Method 1 failed, trying Method 2: Installing all targets..."
          if ./install.sh; then
            echo "✓ All targets installation completed"
          else
            echo "Method 2 failed, trying Method 3: Installing specific toolchain..."
            if ./install.sh --targets esp32s3; then
              echo "✓ Specific toolchain installation completed"
            else
              echo "Method 3 failed, trying Method 4: Manual toolchain installation..."
              
              # 手动下载并安装 ESP32-S3 工具链
              echo "Downloading ESP32-S3 toolchain manually..."
              echo "Current directory: $(pwd)"
              echo "Creating toolchain directory..."
              mkdir -p "$HOME/.espressif/tools/xtensa-esp32s3-elf"
              echo "Toolchain directory created: $HOME/.espressif/tools/xtensa-esp32s3-elf"
              cd "$HOME/.espressif/tools/xtensa-esp32s3-elf"
              echo "Changed to toolchain directory: $(pwd)"
              
              # 下载 ESP32-S3 工具链 (使用官方预编译版本)
              echo "Attempting to download ESP32-S3 toolchain..."
              
              # 尝试多个可能的工具链版本
              TOOLCHAIN_VERSIONS=(
                "12.1_20221002"
                "11.2_20220808"
                "10.4_20230516"
              )
              
              echo "Available toolchain versions to try: ${TOOLCHAIN_VERSIONS[*]}"
              TOOLCHAIN_DOWNLOADED=false
              for version in "${TOOLCHAIN_VERSIONS[@]}"; do
                echo "=== Trying toolchain version: $version ==="
                TOOLCHAIN_URL="https://github.com/espressif/crosstool-NG/releases/download/esp-${version}/xtensa-esp32s3-elf-${version}-x86_64-linux-gnu.tar.gz"
                
                echo "Downloading from: $TOOLCHAIN_URL"
                echo "Current directory: $(pwd)"
                echo "Available space: $(df -h . | tail -1)"
                
                if curl -L -o toolchain.tar.gz "$TOOLCHAIN_URL"; then
                  echo "✓ Toolchain downloaded successfully"
                  echo "Downloaded file size: $(ls -lh toolchain.tar.gz)"
                  echo "Extracting toolchain..."
                  
                  if tar -xzf toolchain.tar.gz; then
                    echo "✓ Toolchain extracted successfully"
                    echo "Extracted contents:"
                    ls -la
                    
                    # 移动文件到正确位置
                    if [ -d "xtensa-esp32s3-elf" ]; then
                      echo "Found xtensa-esp32s3-elf directory, moving files..."
                      mv xtensa-esp32s3-elf/* .
                      rmdir xtensa-esp32s3-elf
                      echo "✓ ESP32-S3 toolchain installed manually (version: $version)"
                      echo "Final toolchain contents:"
                      ls -la
                      TOOLCHAIN_DOWNLOADED=true
                      break
                    else
                      echo "✗ Toolchain extraction failed - unexpected directory structure for version $version"
                      echo "Expected 'xtensa-esp32s3-elf' directory not found"
                      echo "Available directories:"
                      find . -type d -maxdepth 1
                      rm -f toolchain.tar.gz
                      continue
                    fi
                  else
                    echo "✗ Toolchain extraction failed for version $version"
                    echo "Extraction error details:"
                    tar -tzf toolchain.tar.gz | head -10
                    rm -f toolchain.tar.gz
                    continue
                  fi
                else
                  echo "✗ Toolchain download failed for version $version"
                  echo "Download error details:"
                  curl -I "$TOOLCHAIN_URL" 2>/dev/null || echo "Cannot check URL status"
                  continue
                fi
              done
              
              if [ "$TOOLCHAIN_DOWNLOADED" = false ]; then
                echo "✗ All toolchain versions failed to download/install"
                exit 1
              fi
              
              # 验证手动安装的工具链
              echo "=== Verifying Manual Toolchain Installation ==="
              if [ -d "$HOME/.espressif/tools/xtensa-esp32s3-elf" ]; then
                echo "✓ ESP32-S3 toolchain directory found after manual installation"
                echo "Toolchain contents:"
                ls -la "$HOME/.espressif/tools/xtensa-esp32s3-elf/"
                
                if [ -f "$HOME/.espressif/tools/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc" ]; then
                  echo "✓ ESP32-S3 GCC compiler found and verified"
                  echo "GCC version: $($HOME/.espressif/tools/xtensa-esp32s3-elf/bin/xtensa-esp32s3-elf-gcc --version | head -1)"
                  
                  # 设置环境变量以便后续步骤使用
                  export PATH="$HOME/.espressif/tools/xtensa-esp32s3-elf/bin:$PATH"
                  echo "✓ Toolchain PATH updated: $HOME/.espressif/tools/xtensa-esp32s3-elf/bin"
                else
                  echo "✗ ESP32-S3 GCC compiler not found in manual installation"
                  exit 1
                fi
              else
                echo "✗ ESP32-S3 toolchain directory not found after manual installation"
                echo "Available directories in tools:"
                ls -la "$HOME/.espressif/tools/" || echo "No tools directory found"
                exit 1
              fi
              
              cd ~/esp/esp-idf
            fi
          fi
        fi
        
        # 等待一下确保安装完成
        echo "Waiting for installation to complete..."
        sleep 5
        
        # 检查安装日志和状态
        echo "=== Installation Status Check ==="
        echo "ESP-IDF tools directory contents:"
        ls -la ~/.espressif/tools/ 2>/dev/null || echo "No tools directory found"
        
        echo "ESP-IDF installation logs:"
        if [ -f ~/.espressif/logs/install.log ]; then
          echo "Recent install log entries:"
          tail -50 ~/.espressif/logs/install.log | grep -E "(error|fail|warning|toolchain|xtensa)" || echo "No relevant log entries found"
        else
          echo "No install log found"
        fi
        
        echo "ESP-IDF version and status:"
        cd ~/esp/esp-idf
        echo "Current directory: $(pwd)"
        echo "ESP-IDF version: $(git describe --tags --abbrev=0 2>/dev/null || echo 'Unknown')"
        echo "ESP-IDF commit: $(git rev-parse HEAD 2>/dev/null || echo 'Unknown')"
        
        # 检查 ESP-IDF 工具脚本
        echo "ESP-IDF tools availability:"
        ls -la tools/ | grep -E "(install|idf)" || echo "No tool scripts found"
        
        # 验证安装
        echo "=== ESP-IDF Installation Verification ==="
        ls -la ~/.espressif/tools/ | head -10
        echo "ESP-IDF version: $(git describe --tags --abbrev=0)"
        
        # 验证 ESP32-S3 工具链是否安装成功
        echo "=== ESP32-S3 Toolchain Verification ==="
        
        # 智能查找 ESP32-S3 工具链
        ESP32S3_TOOLCHAIN_FOUND=false
        
        # 方法 1: 检查标准目录
        if [ -d "$HOME/.espressif/tools/xtensa-esp32s3-elf" ]; then
          echo "✓ ESP32-S3 toolchain directory found in standard location"
          ESP32S3_TOOLCHAIN_PATH="$HOME/.espressif/tools/xtensa-esp32s3-elf"
          ESP32S3_TOOLCHAIN_FOUND=true
        fi
        
        # 方法 2: 直接查找已知的 Xtensa 工具链 (ESP32-S3 兼容)
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "Method 2: Direct search for Xtensa toolchain (ESP32-S3 compatible)..."
          
          # 从日志中我们知道这个路径存在，直接检查
          KNOWN_TOOLCHAIN_PATH="$HOME/.espressif/tools/xtensa-esp-elf/esp-13.2.0_20230928"
          echo "Checking known toolchain path: $KNOWN_TOOLCHAIN_PATH"
          
          if [ -d "$KNOWN_TOOLCHAIN_PATH" ]; then
            echo "✓ Known toolchain directory exists"
            
            # 检查是否包含 bin 目录和编译器
            if [ -d "$KNOWN_TOOLCHAIN_PATH/bin" ] && [ -f "$KNOWN_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Found working Xtensa toolchain at: $KNOWN_TOOLCHAIN_PATH"
              ESP32S3_TOOLCHAIN_PATH="$KNOWN_TOOLCHAIN_PATH"
              ESP32S3_TOOLCHAIN_FOUND=true
            else
              echo "✗ No bin directory or compiler found in known path"
              echo "Directory contents:"
              ls -la "$KNOWN_TOOLCHAIN_PATH" 2>/dev/null || echo "Cannot access directory"
            fi
          else
            echo "✗ Known toolchain directory does not exist"
          fi
        fi
        
        # 方法 3: 检查系统 PATH 和 Xtensa 工具链
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "Checking system PATH for ESP32-S3 toolchain..."
          if command -v xtensa-esp32s3-elf-gcc >/dev/null 2>&1; then
            echo "✓ ESP32-S3 toolchain found in system PATH"
            ESP32S3_TOOLCHAIN_PATH=$(dirname "$(which xtensa-esp32s3-elf-gcc)")
            ESP32S3_TOOLCHAIN_PATH=$(dirname "$ESP32S3_TOOLCHAIN_PATH")
            ESP32S3_TOOLCHAIN_FOUND=true
          else
            echo "Checking for Xtensa toolchain in PATH..."
            if command -v xtensa-esp-elf-gcc >/dev/null 2>&1; then
              echo "✓ Xtensa toolchain found in system PATH"
              ESP32S3_TOOLCHAIN_PATH=$(dirname "$(which xtensa-esp-elf-gcc)")
              ESP32S3_TOOLCHAIN_PATH=$(dirname "$ESP32S3_TOOLCHAIN_PATH")
              ESP32S3_TOOLCHAIN_FOUND=true
            fi
          fi
        fi
        
        # 方法 4: 专门查找已知存在的 Xtensa 工具链 (ESP32-S3 兼容)
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "Method 4: Looking for Xtensa toolchain that's ESP32-S3 compatible..."
          
          # 查找包含 esp-13.2.0 的 Xtensa 工具链 (从日志中我们知道这个存在)
          XTENSA_TOOLCHAIN_PATH=$(find "$HOME/.espressif/tools" -path "*/esp-13.2.0_20230928/xtensa-esp-elf" -type d 2>/dev/null | head -1)
          
          if [ -n "$XTENSA_TOOLCHAIN_PATH" ]; then
            echo "✓ Found Xtensa toolchain at: $XTENSA_TOOLCHAIN_PATH"
            
            # 检查这个工具链是否包含编译器
            if [ -d "$XTENSA_TOOLCHAIN_PATH/bin" ] && [ -f "$XTENSA_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Xtensa toolchain contains compiler in bin directory"
              ESP32S3_TOOLCHAIN_PATH="$XTENSA_TOOLCHAIN_PATH"
              ESP32S3_TOOLCHAIN_FOUND=true
            else
              echo "Checking parent directory for bin..."
              PARENT_DIR=$(dirname "$XTENSA_TOOLCHAIN_PATH")
              if [ -d "$PARENT_DIR/bin" ] && [ -f "$PARENT_DIR/bin/xtensa-esp-elf-gcc" ]; then
                echo "✓ Found bin directory in parent: $PARENT_DIR"
                ESP32S3_TOOLCHAIN_PATH="$PARENT_DIR"
                ESP32S3_TOOLCHAIN_FOUND=true
              else
                echo "✗ No bin directory found in Xtensa toolchain"
              fi
            fi
          else
            echo "No Xtensa toolchain with esp-13.2.0 found"
          fi
        fi
        
        # 方法 5: 查找任何包含编译器的 Xtensa 工具链
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "Method 5: Looking for any Xtensa toolchain with compiler..."
          
          # 显示所有找到的 Xtensa 目录
          echo "All Xtensa directories found:"
          find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null | sort
          
          # 查找所有 Xtensa 工具链目录
          for xtensa_dir in $(find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null | sort); do
            echo "Checking Xtensa directory: $xtensa_dir"
            
            # 检查这个目录是否包含 bin 目录和编译器
            if [ -d "$xtensa_dir/bin" ] && [ -f "$xtensa_dir/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Found working Xtensa toolchain at: $xtensa_dir"
              ESP32S3_TOOLCHAIN_PATH="$xtensa_dir"
              ESP32S3_TOOLCHAIN_FOUND=true
              break
            fi
            
            # 检查父目录是否包含 bin 目录
            PARENT_DIR=$(dirname "$xtensa_dir")
            if [ -d "$PARENT_DIR/bin" ] && [ -f "$PARENT_DIR/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Found working Xtensa toolchain in parent: $PARENT_DIR"
              ESP32S3_TOOLCHAIN_PATH="$PARENT_DIR"
              ESP32S3_TOOLCHAIN_FOUND=true
              break
            fi
            
            # 检查祖父目录是否包含 bin 目录
            GRANDPARENT_DIR=$(dirname "$PARENT_DIR")
            if [ -d "$GRANDPARENT_DIR/bin" ] && [ -f "$GRANDPARENT_DIR/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Found working Xtensa toolchain in grandparent: $GRANDPARENT_DIR"
              ESP32S3_TOOLCHAIN_PATH="$GRANDPARENT_DIR"
              ESP32S3_TOOLCHAIN_FOUND=true
              break
            fi
          done
        fi
        
        # 方法 6: 最后尝试 - 直接检查已知的目录结构
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "Method 6: Direct check of known directory structure..."
          
          # 从日志中我们知道这个路径存在
          KNOWN_PATH="$HOME/.espressif/tools/xtensa-esp-elf/esp-13.2.0_20230928/xtensa-esp-elf"
          echo "Checking known path: $KNOWN_PATH"
          
          if [ -d "$KNOWN_PATH" ]; then
            echo "✓ Known path exists"
            
            # 检查这个目录的父目录是否包含 bin
            PARENT_PATH="$HOME/.espressif/tools/xtensa-esp-elf/esp-13.2.0_20230928"
            echo "Checking parent path: $PARENT_PATH"
            
            if [ -d "$PARENT_PATH/bin" ] && [ -f "$PARENT_PATH/bin/xtensa-esp-elf-gcc" ]; then
              echo "✓ Found working toolchain in parent: $PARENT_PATH"
              ESP32S3_TOOLCHAIN_PATH="$PARENT_PATH"
              ESP32S3_TOOLCHAIN_FOUND=true
            else
              echo "✗ No bin directory found in parent"
              echo "Parent directory contents:"
              ls -la "$PARENT_PATH" 2>/dev/null || echo "Cannot access parent directory"
            fi
          else
            echo "✗ Known path does not exist"
          fi
        fi
        
        # 如果找到工具链，进行详细验证
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = true ]; then
          echo "✓ ESP32-S3 toolchain found at: $ESP32S3_TOOLCHAIN_PATH"
          echo "Toolchain contents:"
          ls -la "$ESP32S3_TOOLCHAIN_PATH/"
          
          # 检查 bin 目录
          if [ -d "$ESP32S3_TOOLCHAIN_PATH/bin" ]; then
            echo "Bin directory contents:"
            ls -la "$ESP32S3_TOOLCHAIN_PATH/bin/" | head -20
          else
            echo "No bin directory found, checking for alternative structure..."
            # 检查是否有其他可能的目录结构
            find "$ESP32S3_TOOLCHAIN_PATH" -name "bin" -type d 2>/dev/null | while read bin_dir; do
              echo "Found bin directory at: $bin_dir"
              ls -la "$bin_dir/" | head -10
            done
          fi
          
          # 验证关键工具是否存在 (检查多种可能的编译器名称)
          COMPILER_FOUND=false
          
          # 检查 ESP32-S3 特定的编译器
          if [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc" ]; then
            echo "✓ ESP32-S3 GCC compiler found"
            echo "GCC version: $($ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc --version | head -1)"
            COMPILER_FOUND=true
            COMPILER_NAME="xtensa-esp32s3-elf-gcc"
          # 检查通用的 Xtensa 编译器
          elif [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
            echo "✓ Xtensa GCC compiler found (ESP32-S3 compatible)"
            echo "GCC version: $($ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc --version | head -1)"
            COMPILER_FOUND=true
            COMPILER_NAME="xtensa-esp-elf-gcc"
          fi
          
          if [ "$COMPILER_FOUND" = true ]; then
            # 设置环境变量
            export PATH="$ESP32S3_TOOLCHAIN_PATH/bin:$PATH"
            echo "✓ Toolchain PATH updated: $ESP32S3_TOOLCHAIN_PATH/bin"
            echo "COMPILER_NAME=$COMPILER_NAME" >> $GITHUB_ENV
            
            # 测试编译器是否真的工作
            echo "Testing compiler functionality..."
            if $ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME --version >/dev/null 2>&1; then
              echo "✓ Compiler test successful"
              
              # 测试编译器是否能编译 ESP32-S3 代码
              echo "Testing ESP32-S3 compilation capability..."
              TEST_FILE="/tmp/test_esp32s3.c"
              echo '#include <stdio.h>' > "$TEST_FILE"
              echo 'int main() { printf("ESP32-S3 test\n"); return 0; }' >> "$TEST_FILE"
              
              # 尝试编译为 ESP32-S3 目标
              if $ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME -march=xtensa -mcpu=esp32s3 -o /tmp/test_esp32s3 "$TEST_FILE" 2>/dev/null; then
                echo "✓ ESP32-S3 compilation test successful"
                rm -f "$TEST_FILE" /tmp/test_esp32s3"
              else
                echo "⚠ ESP32-S3 compilation test failed - trying generic Xtensa target"
                # 尝试通用 Xtensa 目标
                if $ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME -march=xtensa -o /tmp/test_xtensa "$TEST_FILE" 2>/dev/null; then
                  echo "✓ Generic Xtensa compilation test successful"
                  rm -f "$TEST_FILE" /tmp/test_xtensa"
                else
                  echo "⚠ Generic Xtensa compilation test also failed"
                fi
              fi
              
              # 检查工具链支持的架构和目标
              echo "Checking toolchain architecture support..."
              if $ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME -march=xtensa -mcpu=esp32s3 --print-multiarch 2>/dev/null; then
                echo "✓ ESP32-S3 multiarch support confirmed"
              else
                echo "⚠ ESP32-S3 multiarch not available, checking other options..."
                $ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME --print-multiarch 2>/dev/null || echo "No multiarch info available"
              fi
            else
              echo "✗ Compiler test failed - compiler found but not working"
              ESP32S3_TOOLCHAIN_FOUND=false
            fi
          else
            echo "✗ No compatible GCC compiler found in toolchain directory"
            echo "Available files in bin directory:"
            ls -la "$ESP32S3_TOOLCHAIN_PATH/bin/" 2>/dev/null || echo "No bin directory found"
            ESP32S3_TOOLCHAIN_FOUND=false
          fi
        fi
        
        # 如果仍然没有找到工具链，显示诊断信息
        if [ "$ESP32S3_TOOLCHAIN_FOUND" = false ]; then
          echo "✗ ESP32-S3 toolchain not found after all search methods"
          echo "Available toolchains:"
          ls -la "$HOME/.espressif/tools/" || echo "No tools directory found"
          
          # 检查是否有其他 Xtensa 工具链
          echo "Checking for other Xtensa toolchains..."
          find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null || echo "No Xtensa toolchains found"
          
          # 检查是否有任何工具链
          echo "All available tools:"
          find "$HOME/.espressif/tools" -type d 2>/dev/null | head -20
          
          echo "✗ ESP32-S3 toolchain installation failed after all attempts"
          echo "✗ Failed to install ESP32-S3 toolchain"
          exit 1
        fi
        
        echo "========================================"

    - name: Setup ESP-IDF Environment
      run: |
        echo "ESP_IDF_PATH=$HOME/esp/esp-idf" >> $GITHUB_ENV
        echo "PATH=$HOME/esp/esp-idf/tools:$PATH" >> $GITHUB_ENV
        
        # 设置 ESP-IDF 工具链环境变量
        echo "IDF_TOOLS_PATH=$HOME/.espressif" >> $GITHUB_ENV
        echo "IDF_PYTHON_ENV_PATH=$HOME/.espressif/python_env/idf5.2_py3.12_env" >> $GITHUB_ENV
        
        # 动态查找并设置工具链路径
        echo "=== Dynamic Toolchain Path Setup ==="
        
        # 使用之前验证步骤中找到的工具链路径
        if [ -n "$ESP32S3_TOOLCHAIN_PATH" ]; then
          echo "Using verified ESP32-S3 toolchain: $ESP32S3_TOOLCHAIN_PATH"
          echo "PATH=$ESP32S3_TOOLCHAIN_PATH/bin:$PATH" >> $GITHUB_ENV
          
          # 根据找到的编译器类型设置环境变量
          if [ -n "$COMPILER_NAME" ]; then
            echo "CC=$ESP32S3_TOOLCHAIN_PATH/bin/$COMPILER_NAME" >> $GITHUB_ENV
            # 设置对应的 C++ 编译器
            if [[ "$COMPILER_NAME" == "xtensa-esp32s3-elf-gcc" ]]; then
              echo "CXX=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-g++" >> $GITHUB_ENV
            else
              echo "CXX=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-g++" >> $GITHUB_ENV
            fi
          else
            # 尝试自动检测编译器
            if [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc" ]; then
              echo "CC=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc" >> $GITHUB_ENV
              echo "CXX=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-g++" >> $GITHUB_ENV
            elif [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
              echo "CC=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" >> $GITHUB_ENV
              echo "CXX=$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-g++" >> $GITHUB_ENV
            else
              echo "No compatible compiler found in toolchain"
              exit 1
            fi
          fi
          
          echo "ESP32S3_TOOLCHAIN_PATH=$ESP32S3_TOOLCHAIN_PATH" >> $GITHUB_ENV
        else
          # 如果环境变量中没有，尝试重新查找
          echo "ESP32S3_TOOLCHAIN_PATH not set, searching for toolchain..."
          ESP32S3_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*esp32s3*" -type d 2>/dev/null | head -1)
          if [ -n "$ESP32S3_TOOLCHAIN" ]; then
            echo "Found ESP32-S3 toolchain: $ESP32S3_TOOLCHAIN"
            echo "PATH=$ESP32S3_TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV
            echo "CC=$ESP32S3_TOOLCHAIN/bin/xtensa-esp32s3-elf-gcc" >> $GITHUB_ENV
            echo "CXX=$ESP32S3_TOOLCHAIN/bin/xtensa-esp32s3-elf-g++" >> $GITHUB_ENV
            echo "ESP32S3_TOOLCHAIN_PATH=$ESP32S3_TOOLCHAIN" >> $GITHUB_ENV
          else
            echo "ESP32-S3 toolchain not found, trying to find any Xtensa toolchain..."
            XTENSA_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null | head -1)
            if [ -n "$XTENSA_TOOLCHAIN" ]; then
              echo "Found Xtensa toolchain: $XTENSA_TOOLCHAIN"
              echo "PATH=$XTENSA_TOOLCHAIN/bin:$PATH" >> $GITHUB_ENV
              echo "CC=$XTENSA_TOOLCHAIN/bin/xtensa-esp-elf-gcc" >> $GITHUB_ENV
              echo "CXX=$XTENSA_TOOLCHAIN/bin/xtensa-esp-elf-g++" >> $GITHUB_ENV
              echo "ESP32S3_TOOLCHAIN_PATH=$XTENSA_TOOLCHAIN" >> $GITHUB_ENV
            else
              echo "No Xtensa toolchain found!"
              exit 1
            fi
          fi
        fi
        
        # 查找并设置 Ninja 路径
        NINJA_PATH=$(find "$HOME/.espressif/tools" -name "ninja" -type f 2>/dev/null | head -1)
        if [ -n "$NINJA_PATH" ]; then
          echo "Found Ninja: $NINJA_PATH"
          echo "PATH=$(dirname "$NINJA_PATH"):$PATH" >> $GITHUB_ENV
          echo "CMAKE_MAKE_PROGRAM=$NINJA_PATH" >> $GITHUB_ENV
        else
          echo "Ninja not found!"
          exit 1
        fi
        
        # 设置其他常用工具路径
        echo "PATH=$HOME/.espressif/tools/cmake/3.24.0/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/openocd-esp32/v0.12.0-esp32-20230419/openocd-esp32/bin:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/idf-exe/1.0.3:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/ccache/4.8/ccache-4.8-linux-x86_64:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/dfu-util/0.11/dfu-util-0.11/dfu-util:$PATH" >> $GITHUB_ENV
        echo "PATH=$HOME/.espressif/tools/esp-rom-elfs/20230320:$PATH" >> $GITHUB_ENV
        
        # 最终验证 ESP32-S3 工具链
        echo "=== Final ESP32-S3 Toolchain Verification ==="
        if [ -n "$ESP32S3_TOOLCHAIN_PATH" ]; then
          echo "ESP32S3_TOOLCHAIN_PATH: $ESP32S3_TOOLCHAIN_PATH"
          
          # 检查多种可能的编译器
          if [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc" ]; then
            echo "CC: $ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-gcc"
            echo "CXX: $ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp32s3-elf-g++"
            echo "✓ ESP32-S3 GCC compiler file exists"
          elif [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
            echo "CC: $ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc"
            echo "CXX: $ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-g++"
            echo "✓ Xtensa GCC compiler file exists (ESP32-S3 compatible)"
          else
            echo "✗ No compatible GCC compiler file found"
            echo "Available files in bin directory:"
            ls -la "$ESP32S3_TOOLCHAIN_PATH/bin/" 2>/dev/null || echo "No bin directory found"
            exit 1
          fi
        else
          echo "ESP32S3_TOOLCHAIN_PATH not set, checking PATH for toolchain..."
          if command -v xtensa-esp32s3-elf-gcc >/dev/null 2>&1; then
            echo "✓ ESP32-S3 GCC compiler found in PATH"
            echo "GCC path: $(which xtensa-esp32s3-elf-gcc)"
          elif command -v xtensa-esp-elf-gcc >/dev/null 2>&1; then
            echo "✓ Xtensa GCC compiler found in PATH (ESP32-S3 compatible)"
            echo "GCC path: $(which xtensa-esp-elf-gcc)"
          else
            echo "✗ No compatible GCC compiler found in PATH"
            exit 1
          fi
        fi
        
        # 端到端测试：尝试编译一个简单的 ESP32-S3 项目
        echo "=== End-to-End ESP32-S3 Build Test ==="
        TEST_PROJECT_DIR="/tmp/esp32s3_test_project"
        mkdir -p "$TEST_PROJECT_DIR"
        cd "$TEST_PROJECT_DIR"
        
        # 创建简单的测试项目
        echo "Creating test ESP32-S3 project..."
        echo 'cmake_minimum_required(VERSION 3.16)' > CMakeLists.txt
        echo 'project(esp32s3_test)' >> CMakeLists.txt
        echo 'set(CMAKE_C_COMPILER $ENV{CC})' >> CMakeLists.txt
        echo 'set(CMAKE_CXX_COMPILER $ENV{CXX})' >> CMakeLists.txt
        echo 'set(CMAKE_SYSTEM_NAME Generic)' >> CMakeLists.txt
        echo 'set(CMAKE_SYSTEM_PROCESSOR xtensa)' >> CMakeLists.txt
        echo 'set(CMAKE_C_FLAGS "-march=xtensa -mcpu=esp32s3")' >> CMakeLists.txt
        echo 'set(CMAKE_CXX_FLAGS "-march=xtensa -mcpu=esp32s3")' >> CMakeLists.txt
        
        echo '#include <stdio.h>' > main.c
        echo 'int main() {' >> main.c
        echo '    printf("ESP32-S3 test program\n");' >> main.c
        echo '    return 0;' >> main.c
        echo '}' >> main.c
        
        # 尝试编译
        echo "Attempting to compile test project..."
        if [ -n "$ESP32S3_TOOLCHAIN_PATH" ] && [ -f "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" ]; then
          echo "Using toolchain: $ESP32S3_TOOLCHAIN_PATH"
          if "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" -march=xtensa -mcpu=esp32s3 -o test_program main.c 2>/dev/null; then
            echo "✓ ESP32-S3 compilation test successful!"
            echo "Generated binary:"
            file test_program 2>/dev/null || echo "Could not determine binary type"
          else
            echo "⚠ ESP32-S3 compilation test failed"
            echo "Trying generic Xtensa compilation..."
            if "$ESP32S3_TOOLCHAIN_PATH/bin/xtensa-esp-elf-gcc" -march=xtensa -o test_program main.c 2>/dev/null; then
              echo "✓ Generic Xtensa compilation successful (ESP32-S3 compatible)"
            else
              echo "✗ Generic Xtensa compilation also failed"
            fi
          fi
        else
          echo "Toolchain not available for end-to-end test"
        fi
        
        # 清理测试文件
        cd /
        rm -rf "$TEST_PROJECT_DIR"

    - name: Verify Build Tools
      run: |
        echo "=== Build Tools Verification ==="
        echo "CMake version: $(cmake --version)"
        echo "Ninja version: $(ninja --version)"
        echo "GCC version: $(gcc --version | head -1)"
        echo "G++ version: $(g++ --version | head -1)"
        echo "Python version: $(python3 --version)"
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "PATH: $PATH"
        echo "================================"
        
        # 验证 ESP-IDF 工具链
        echo "=== ESP-IDF Toolchain Verification ==="
        if [ -d "$HOME/.espressif" ]; then
          echo "ESP-IDF tools directory exists"
          ls -la $HOME/.espressif/tools/ | head -10
        else
          echo "ESP-IDF tools directory not found"
        fi
        
        # 检查关键工具
        echo "=== Dynamic Tool Verification ==="
        
        # 查找 Ninja
        NINJA_PATH=$(find "$HOME/.espressif/tools" -name "ninja" -type f 2>/dev/null | head -1)
        if [ -n "$NINJA_PATH" ]; then
          echo "Ninja found: $NINJA_PATH"
          "$NINJA_PATH" --version
        else
          echo "Ninja not found"
        fi
        
        # 查找 ESP32-S3 编译器
        ESP32S3_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*esp32s3*" -type d 2>/dev/null | head -1)
        if [ -n "$ESP32S3_TOOLCHAIN" ]; then
          ESP32S3_GCC="$ESP32S3_TOOLCHAIN/bin/xtensa-esp32s3-elf-gcc"
          if [ -f "$ESP32S3_GCC" ]; then
            echo "ESP32-S3 compiler found: $ESP32S3_GCC"
            "$ESP32S3_GCC" --version | head -1
          else
            echo "ESP32-S3 compiler not found in toolchain: $ESP32S3_TOOLCHAIN"
          fi
        else
          echo "ESP32-S3 toolchain not found"
        fi
        
        # 查找任何 Xtensa 编译器
        XTENSA_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null | head -1)
        if [ -n "$XTENSA_TOOLCHAIN" ]; then
          echo "Xtensa toolchain found: $XTENSA_TOOLCHAIN"
          find "$XTENSA_TOOLCHAIN/bin" -name "*gcc" -type f 2>/dev/null | head -5
        else
          echo "No Xtensa toolchain found"
        fi
        echo "====================================="

    - name: Copy Custom CMake Presets
      run: |
        cp nanobuild-scripts/CMakePresets-W5500.json nf-interpreter/CMakePresets.json

    - name: Verify ESP-IDF Environment
      run: |
        # 加载 ESP-IDF 环境
        source ~/esp/esp-idf/export.sh
        
        echo "=== ESP-IDF Environment Verification ==="
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "IDF_TOOLS_PATH: $IDF_TOOLS_PATH"
        echo "PATH includes ESP-IDF tools: $(echo $PATH | grep -o '[^:]*esp-idf[^:]*' | head -5)"
        echo "Ninja version: $(ninja --version)"
        echo "ESP32-S3 compiler: $(which xtensa-esp32s3-elf-gcc)"
        echo "========================================="
        
        # 验证关键环境变量
        echo "=== Key Environment Variables ==="
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE_MAKE_PROGRAM: $CMAKE_MAKE_PROGRAM"
        echo "================================="
        
        # 验证工具文件存在
        echo "=== Tool File Verification ==="
        if [ -f "$CC" ]; then
          echo "✓ CC exists: $CC"
        else
          echo "✗ CC not found: $CC"
        fi
        
        if [ -f "$CXX" ]; then
          echo "✓ CXX exists: $CXX"
        else
          echo "✗ CXX not found: $CXX"
        fi
        
        if [ -f "$CMAKE_MAKE_PROGRAM" ]; then
          echo "✓ CMAKE_MAKE_PROGRAM exists: $CMAKE_MAKE_PROGRAM"
        else
          echo "✗ CMAKE_MAKE_PROGRAM not found: $CMAKE_MAKE_PROGRAM"
        fi
        echo "================================"

    - name: Configure CMake with Preset
      run: |
        set -e
        cd nf-interpreter
        mkdir -p build
        
        # 设置 ESP-IDF 环境（必须在同一 shell 中）
        source ~/esp/esp-idf/export.sh
        
        # 手动设置关键环境变量以确保它们被正确设置
        export ESP_IDF_PATH="$HOME/esp/esp-idf"
        export IDF_TOOLS_PATH="$HOME/.espressif"
        
        # 查找可用的 ESP32-S3 工具链
        echo "=== Finding Available ESP32 Toolchains ==="
        find "$HOME/.espressif/tools" -name "*esp32s3*" -type d 2>/dev/null || echo "No ESP32-S3 tools found"
        find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null || echo "No Xtensa tools found"
        
        # 查找可用的编译器
        echo "=== Finding Available Compilers ==="
        find "$HOME/.espressif/tools" -name "*gcc" -type f 2>/dev/null || echo "No GCC found"
        find "$HOME/.espressif/tools" -name "*g++" -type f 2>/dev/null || echo "No G++ found"
        
        # 查找可用的 Ninja
        echo "=== Finding Available Ninja ==="
        find "$HOME/.espressif/tools" -name "ninja" -type f 2>/dev/null || echo "No Ninja found"
        
        # 动态设置工具链路径
        ESP32S3_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*esp32s3*" -type d 2>/dev/null | head -1)
        if [ -n "$ESP32S3_TOOLCHAIN" ]; then
          echo "Found ESP32-S3 toolchain: $ESP32S3_TOOLCHAIN"
          export PATH="$ESP32S3_TOOLCHAIN/bin:$PATH"
          export CC="$ESP32S3_TOOLCHAIN/bin/xtensa-esp32s3-elf-gcc"
          export CXX="$ESP32S3_TOOLCHAIN/bin/xtensa-esp32s3-elf-g++"
        else
          echo "ESP32-S3 toolchain not found, trying to find any Xtensa toolchain..."
          XTENSA_TOOLCHAIN=$(find "$HOME/.espressif/tools" -name "*xtensa*" -type d 2>/dev/null | head -1)
          if [ -n "$XTENSA_TOOLCHAIN" ]; then
            echo "Found Xtensa toolchain: $XTENSA_TOOLCHAIN"
            export PATH="$XTENSA_TOOLCHAIN/bin:$PATH"
            export CC="$XTENSA_TOOLCHAIN/bin/xtensa-esp32s3-elf-gcc"
            export CXX="$XTENSA_TOOLCHAIN/bin/xtensa-esp32s3-elf-g++"
          else
            echo "No Xtensa toolchain found!"
            exit 1
          fi
        fi
        
        # 设置 Ninja 路径
        NINJA_PATH=$(find "$HOME/.espressif/tools" -name "ninja" -type f 2>/dev/null | head -1)
        if [ -n "$NINJA_PATH" ]; then
          echo "Found Ninja: $NINJA_PATH"
          export PATH="$(dirname "$NINJA_PATH"):$PATH"
          export CMAKE_MAKE_PROGRAM="$NINJA_PATH"
        else
          echo "Ninja not found!"
          exit 1
        fi
        
        # 显示环境变量
        echo "=== Environment Variables ==="
        echo "ESP_IDF_PATH: $ESP_IDF_PATH"
        echo "PATH: $PATH"
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "CMAKE_MAKE_PROGRAM: $CMAKE_MAKE_PROGRAM"
        echo "============================"
        
        # 验证工具路径
        echo "=== Tool Path Verification ==="
        echo "CC path: $CC"
        echo "CXX path: $CXX"
        echo "Ninja path: $CMAKE_MAKE_PROGRAM"
        
        # 检查文件是否存在
        if [ -f "$CC" ]; then
          echo "✓ CC file exists"
          ls -la "$CC"
        else
          echo "✗ CC file not found: $CC"
          exit 1
        fi
        
        if [ -f "$CXX" ]; then
          echo "✓ CXX file exists"
          ls -la "$CXX"
        else
          echo "✗ CXX file not found: $CXX"
          exit 1
        fi
        
        if [ -f "$CMAKE_MAKE_PROGRAM" ]; then
          echo "✓ Ninja file exists"
          ls -la "$CMAKE_MAKE_PROGRAM"
          "$CMAKE_MAKE_PROGRAM" --version
        else
          echo "✗ Ninja file not found: $CMAKE_MAKE_PROGRAM"
          exit 1
        fi
        echo "============================="
        
        # 验证关键工具
        echo "=== Tool Verification ==="
        which ninja || { echo "ninja not found in PATH"; exit 1; }
        ninja --version
        which xtensa-esp32s3-elf-gcc || { echo "ESP32-S3 compiler not found"; exit 1; }
        xtensa-esp32s3-elf-gcc --version | head -1
        echo "========================="
        
        # 验证 ESP-IDF 工具
        echo "=== ESP-IDF Tool Verification ==="
        if command -v idf.py >/dev/null 2>&1; then
          echo "✓ idf.py found"
          idf.py --version
        else
          echo "✗ idf.py not found"
        fi
        
        if [ -n "$ESP_IDF_PATH" ]; then
          echo "✓ ESP_IDF_PATH is set: $ESP_IDF_PATH"
        else
          echo "✗ ESP_IDF_PATH is not set"
        fi
        
        if [ -n "$IDF_TOOLS_PATH" ]; then
          echo "✓ IDF_TOOLS_PATH is set: $IDF_TOOLS_PATH"
        else
          echo "✗ IDF_TOOLS_PATH is not set"
        fi
        echo "================================"
        
        # 显示可用的 CMake 预设
        echo "=== Available CMake Presets ==="
        cmake --list-presets || true
        echo "================================"
        
        # 使用自定义预设，根据构建类型选择，并传递编译器变量
        if [ "${{ matrix.build_type }}" = "Release" ]; then
          echo "Configuring with ESP32_S3_W5500_Release preset..."
          cmake --preset ESP32_S3_W5500_Release \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_MAKE_PROGRAM="$CMAKE_MAKE_PROGRAM"
        else
          echo "Configuring with ESP32_S3_W5500_Debug preset..."
          cmake --preset ESP32_S3_W5500_Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_C_COMPILER="$CC" \
            -DCMAKE_CXX_COMPILER="$CXX" \
            -DCMAKE_MAKE_PROGRAM="$CMAKE_MAKE_PROGRAM"
        fi
        
        # 显示 CMake 缓存
        echo "=== CMake Cache Contents ==="
        cat build/CMakeCache.txt | grep -E "(CMAKE_C_COMPILER|CMAKE_CXX_COMPILER|CMAKE_MAKE_PROGRAM|ESP_IDF_PATH)" || true
        echo "============================"
        
        # 如果配置失败，显示更多诊断信息
        if [ $? -ne 0 ]; then
          echo "=== CMake Configuration Failed ==="
          echo "Available presets:"
          cmake --list-presets || true
          echo "Available generators:"
          cmake --help | grep -A 20 "Generators" || true
          echo "================================"
          exit 1
        fi

    - name: Build Firmware
      run: |
        cd nf-interpreter/build
        cmake --build . -- -j$(nproc)

    - name: Calculate Firmware Size
      id: firmware_size
      run: |
        cd nf-interpreter/build
        SIZE=$(stat -c%s nanoCLR.bin)
        SIZE_MB=$(echo "scale=2; $SIZE/1024/1024" | bc)
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "size_mb=$SIZE_MB" >> $GITHUB_OUTPUT
        echo "Firmware size: ${SIZE_MB}MB ($SIZE bytes)"

    - name: Create Release Notes
      run: |
        cat > release-notes.md << 'EOF'
        # ESP32-S3 + W5500 nanoFramework Firmware
        
        ## Build Information
        - **Build Type**: ${{ matrix.build_type }}
        - **ESP-IDF Version**: ${{ env.ESP_IDF_VERSION }}
        - **nanoFramework Version**: ${{ env.NANOFRAMEWORK_VERSION }}
        - **Firmware Size**: ${{ steps.firmware_size.outputs.size_mb }}MB
        - **Build Date**: $(date -u)
        - **Commit**: ${{ github.sha }}
        
        ## Hardware Configuration
        - **Target**: ESP32-S3
        - **Ethernet**: W5500 SPI Module
        - **SPI Pins**:
          - SCLK: GPIO13
          - MISO: GPIO12
          - MOSI: GPIO11
          - CS: GPIO14
          - INT: GPIO10
          - RST: GPIO9
        
        ## Features
        - ${{ matrix.build_type == 'Release' && '✅ Production optimized (RTM enabled)' || '✅ Full debugging support' }}
        - ${{ matrix.build_type == 'Release' && '✅ Debugger disabled' || '✅ Debug symbols included' }}
        - ${{ matrix.build_type == 'Release' && '✅ Size optimized' || '✅ Visual Studio debugging' }}
        
        ## Usage
        1. Flash the firmware using nanoFramework Flash Tool
        2. Connect W5500 module according to pin configuration
        3. Use nanoFramework Visual Studio extension for development
        
        ## Downloads
        - Firmware: `nanoCLR.bin`
        - Release notes: `release-notes.md`
        EOF

    - name: Upload Firmware Artifact
      if: github.event.inputs.upload_artifacts != 'false'
      uses: actions/upload-artifact@v4
      with:
        name: nanoFramework-ESP32S3-W5500-${{ matrix.build_type }}-${{ github.sha }}
        path: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          release-notes.md
        retention-days: 30

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') && matrix.build_type == 'Release'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body_path: release-notes.md
        files: |
          nf-interpreter/build/nanoCLR.bin
          nf-interpreter/build/nanoCLR.elf
          release-notes.md
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: nf-interpreter/build/nanoCLR.bin
        asset_name: nanoCLR-ESP32S3-W5500-${{ matrix.build_type }}-${{ github.ref_name }}.bin
        asset_content_type: application/octet-stream